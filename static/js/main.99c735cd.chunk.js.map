{"version":3,"sources":["config/Fire.js","component/Login.js","component/Home.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Login","props","login","e","preventDefault","fire","auth","signInWithEmailAndPassword","state","email","password","catch","error","setState","fireErrors","message","register","createUserWithEmailAndPassword","getAction","action","formTitle","loginBtn","handleChange","target","name","value","errorNotification","this","className","submitBtn","type","onClick","login_register","style","textAlign","id","onChange","placeholder","Component","Home","logout","btn1Onclick","ref","set","btn2Onclick","signOut","click1","butn1","click2","butn2","update","onBackButtonEvent","on","snapshot","userObj1","val","userObj2","window","addEventListener","removeEventListener","paddingTop","marginTop","disabled","App","user","authListener","onAuthStateChanged","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99c735cd.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\n// adding firebase configurtaion\r\nvar config = {\r\n  apiKey: \"AIzaSyAe1lpOoNgxC0UTeE_XjVPSb-J5_STXZIA\",\r\n  authDomain: \"react-prescibe.firebaseapp.com\",\r\n  databaseURL: \"https://react-prescibe.firebaseio.com\",\r\n  projectId: \"react-prescibe\",\r\n  storageBucket: \"react-prescibe.appspot.com\",\r\n  messagingSenderId: \"246583401665\",\r\n  appId: \"1:246583401665:web:584d3f17dcfb543d304840\"\r\n};\r\n// initialising firebase\r\nfirebase.initializeApp(config);\r\nfirebase.firestore()\r\n// .settings({ timestampsInSnapshots: true });\r\nexport default firebase;\r\n","import React, { Component } from 'react';\r\nimport fire from '../config/Fire';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            fireErrors: '', //error message from firebase \r\n            formTitle: 'Login', //form title\r\n            loginBtn: true //flag for registation or login button toggle\r\n        }\r\n    }\r\n\r\n    // event on clicking login button\r\n    login = e => {\r\n        e.preventDefault();\r\n        // authenticating user using firebase Authentication method\r\n        fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\r\n            .catch((error) => {\r\n                this.setState({ fireErrors: error.message })\r\n            });\r\n    }\r\n\r\n    // event on clicking register button\r\n    register = e => {\r\n        e.preventDefault();\r\n        // Registering user using firebase Authentication method\r\n        fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n            .catch((error) => {\r\n                this.setState({ fireErrors: error.message })\r\n            });\r\n    }\r\n\r\n    // changing the form title based on login button flag\r\n    getAction = action => {\r\n        if (action === 'reg') {\r\n            this.setState({ formTitle: 'Register New User', loginBtn: false, fireErrors: '' });\r\n        } else {\r\n            this.setState({ formTitle: 'Login', loginBtn: true, fireErrors: '' });\r\n        }\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        // render error messages from friebase\r\n        let errorNotification = this.state.fireErrors ?\r\n            (<div className=\"Error\"> {this.state.fireErrors} </div>) : null;\r\n\r\n        // render the button based on loginbuttun state\r\n        let submitBtn = this.state.loginBtn ?\r\n            (<input className=\"loginBtn\" type=\"submit\" onClick={this.login} value=\"Login\" />) :\r\n            (<input className=\"loginBtn\" type=\"submit\" onClick={this.register} value=\"Register\" />);\r\n\r\n        // render the button based on loginbuttun state\r\n        let login_register = this.state.loginBtn ?\r\n            (<div className=\"div2\">Donâ€™t have an account?\r\n            <button className=\"registerBtn\" onClick={() => this.getAction('reg')}>Register</button>\r\n            </div>) :\r\n            (<div className=\"div2\">Already have an account?\r\n            <button className=\"registerBtn\" onClick={() => this.getAction('login')}>Login</button>\r\n            </div>)\r\n\r\n        return (\r\n            <div className=\"container-fluid\" style={{textAlign:\"center\"}}>\r\n                <div id=\"title\"><h1>{this.state.formTitle}</h1></div>\r\n                <div className=\"body\">\r\n                    <form>\r\n                        <div className=\"lable\">  Enter Email Id :</div>\r\n                        {errorNotification}\r\n                        <input type=\"text\" value={this.state.email} onChange={this.handleChange} name=\"email\" placeholder=\"email\" />\r\n                        <div className=\"lable2\">Enter Password :</div>\r\n                        <input type=\"password\" value={this.state.password} onChange={this.handleChange} name=\"password\" placeholder=\"password\"/>\r\n                        <div>{submitBtn}</div>\r\n                    </form>\r\n                    {login_register}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport fire from '../config/Fire';\r\nimport * as firebase from \"firebase\"\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            butn1: false, //flag for enabing/diabling button1 \r\n            butn2: false, //flag for enabing/diabling button1 \r\n            btn1Onclick: false, //flag for button1 click event\r\n            btn2Onclick: false, //flag for button2 click event\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n       \r\n        //if the the user had performed onClick event , than during logout changing the button to enabled state in DB\r\n        if (this.state.btn1Onclick == true) { firebase.database().ref(\"button1\").set(false) }\r\n        if (this.state.btn2Onclick == true) { firebase.database().ref(\"button2\").set(false) }\r\n        fire.auth().signOut();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // check for button clic\r\n        if (this.state.btn1Onclick == false) {\r\n            //database().ref().on() -- will update changes in Db without refreshing the page. \r\n            firebase.database().ref(\"button1\").on('value', (snapshot) => {\r\n                const userObj1 = snapshot.val();\r\n                this.setState({ butn1: userObj1 })\r\n            });\r\n        }\r\n        if (this.state.btn1Onclick == false) {\r\n            //database().ref().on() -- will update changes in Db without refreshing the page. \r\n            firebase.database().ref(\"button2\").on('value', (snapshot) => {\r\n                const userObj2 = snapshot.val();\r\n                this.setState({ butn2: userObj2 })\r\n            });\r\n        }\r\n        window.addEventListener('beforeunload', this.update);// event to triger on window or browser close\r\n        window.addEventListener('onpopstate',this.onBackButtonEvent);// event to triger on window back button\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('beforeunload', this.update);\r\n        window.removeEventListener('onpopstate',this.onBackButtonEvent);\r\n    }\r\n\r\n    // button1 onClick event\r\n    click1 = e => {\r\n        firebase.database().ref(\"button1\").set(true) // set button1 to disbale statein DB\r\n        this.setState({ butn1: false })\r\n        this.setState({ btn1Onclick: true }) // set button1 clicked flag true\r\n    }\r\n    // button2 onClick event\r\n    click2 = e => {\r\n        firebase.database().ref(\"button2\").set(true) // set button1 to disbale statein DB\r\n        this.setState({ butn2: false })\r\n        this.setState({ btn2Onclick: true })  // set button2 clicked flag true\r\n    }\r\n\r\n    // event to execute on window or browser close\r\n    update = e => {\r\n        if (this.state.btn1Onclick == true) { firebase.database().ref(\"button1\").set(false) }\r\n        if (this.state.btn2Onclick == true) { firebase.database().ref(\"button2\").set(false) }\r\n    }\r\n    // event for back button press\r\n    onBackButtonEvent= e => {\r\n        if (this.state.btn1Onclick == true) { firebase.database().ref(\"button1\").set(false) }\r\n        if (this.state.btn2Onclick == true) { firebase.database().ref(\"button2\").set(false) }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <div className=\"row\" style={{ paddingTop: \"3%\", textAlign: \"center\" }}>\r\n                    <div className=\"col-md-8\"><h1> Welcome home!</h1></div>\r\n                    <div className=\"col-md-4\"><button id=\"log\" onClick={this.logout}> Log Out </button></div>\r\n                </div>\r\n                <div className=\"row\" style={{ marginTop: \"10%\", textAlign: \"center\" }}>\r\n                    <div className=\"col-md-4\"><button className=\"butn\" disabled={this.state.butn1} onClick={this.click1} >Button 1</button></div>\r\n                    <div className=\"col-md-4\"><button className=\"butn\" disabled={this.state.butn2} onClick={this.click2}>Button 2</button></div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport fire from './config/Fire';\nimport Login from './component/Login';\nimport Home from './component/Home';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: null\n    }\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n// check any user is logged in and update user in state\n  authListener() {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        console.log(user.email)\n        this.setState({ user });\n      } else {\n        this.setState({ user: null });\n      }\n    });\n  }\n\n  render() {\n    return (\n      // check if user logged in or not, if logged in render home component else render login component\n      <div className=\"container-fluid\" id=\"main\">\n        {this.state.user ? (<Home user={this.state.user.email} />) : (<Login />)}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}